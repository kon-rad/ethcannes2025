import { NextRequest, NextResponse } from 'next/server';
import { promptGenerationService } from '@/services/promptGenerationService';
import { imageGenerationService } from '@/services/imageGenerationService';
import { prisma } from '@/lib/prisma';

export async function POST(request: NextRequest) {
  try {
    const { 
      characterId,
      userId,
      postType = 'social'
    } = await request.json();

    if (!characterId || !userId) {
      return NextResponse.json(
        { error: 'characterId and userId are required' },
        { status: 400 }
      );
    }

    // Fetch character information
    const character = await prisma.aICharacter.findUnique({
      where: { id: characterId },
      select: {
        id: true,
        name: true,
        description: true,
        systemPrompt: true,
        imageUrl: true
      }
    });

    if (!character) {
      return NextResponse.json(
        { error: 'Character not found' },
        { status: 404 }
      );
    }

    console.log('Auto Post - Character Info:', {
      name: character.name,
      description: character.description,
      postType
    });

    // Step 1: Generate auto post content using LLM
    console.log('Step 1: Generating auto post content...');
    const characterData = {
      name: character.name,
      description: character.description,
      systemPrompt: '', // Use empty string since we're replacing with description
      imageUrl: character.imageUrl || undefined
    };
    const promptResponse = await promptGenerationService.generateAutoPostContent(characterData, postType);

    console.log('Generated auto post content:', promptResponse);

    // Step 2: Generate image using the prompt
    console.log('Step 2: Generating image...');
    console.log('Generated prompt for image:', promptResponse.imagePrompt);
    const imageResponse = await imageGenerationService.generateImages({
      prompt: promptResponse.imagePrompt,
      steps: 28,
      n: 1,
      model: 'black-forest-labs/FLUX.1-dev' // Use FLUX.1 Dev for consistency
    });

    if (!imageResponse.images || imageResponse.images.length === 0) {
      throw new Error('No image generated');
    }

    const generatedImageUrl = imageResponse.images[0];
    console.log('Generated image URL:', generatedImageUrl);
    console.log('Image URL type:', typeof generatedImageUrl);
    console.log('Image URL length:', generatedImageUrl?.length);

    // Step 3: Upload image to S3
    console.log('Step 3: Uploading image to S3...');
    const s3ImageUrl = await imageGenerationService.uploadImageToS3(generatedImageUrl, characterId);
    console.log('S3 Image URL:', s3ImageUrl);

    // Step 4: Save as post
    console.log('Step 4: Saving as post...');
    let post = null;
    try {
      post = await prisma.post.create({
        data: {
          type: 'image',
          imageUrl: s3ImageUrl,
          title: promptResponse.postTitle || `Auto-generated post by ${character.name}`,
          description: promptResponse.postDescription || `Generated using AI: ${promptResponse.imagePrompt}`,
          prompt: promptResponse.imagePrompt, // Save the prompt for debugging
          userId,
          characterId
        }
      });
      console.log('Auto post created successfully:', post);
    } catch (dbError) {
      console.error('Failed to save auto post to database:', dbError);
      console.warn('Database error details:', {
        error: dbError,
        message: dbError instanceof Error ? dbError.message : 'Unknown error',
        stack: dbError instanceof Error ? dbError.stack : undefined
      });
      // Continue without saving post if database isn't ready
    }

    return NextResponse.json({
      success: true,
      imageUrl: s3ImageUrl,
      prompt: promptResponse.imagePrompt,
      title: promptResponse.postTitle,
      description: promptResponse.postDescription,
      post,
      model: imageResponse.model
    });

  } catch (error) {
    console.error('Auto Post Error:', error);
    
    let errorMessage = 'Failed to create auto post';
    if (error instanceof Error) {
      if (error.message.includes('Failed to generate image prompt')) {
        errorMessage = 'Failed to generate image prompt from character information';
      } else if (error.message.includes('Failed to generate images')) {
        errorMessage = 'Failed to generate image from prompt';
      } else if (error.message.includes('No image generated')) {
        errorMessage = 'No image was generated by the AI model';
      } else {
        errorMessage = error.message;
      }
    }
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
} 